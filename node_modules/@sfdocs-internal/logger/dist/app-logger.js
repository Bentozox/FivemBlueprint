"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appLogger = void 0;
const winston_1 = __importDefault(require("winston"));
const log_level_config_1 = __importDefault(require("./log-level-config"));
const { combine, timestamp, label, printf, splat, simple, colorize } = winston_1.default.format;
/**
 * App logger using winston.
 * @param config logging configuration.
 * @returns winston logger.
 */
function appLogger(config) {
    winston_1.default.addColors(log_level_config_1.default.colors);
    const logger = winston_1.default.createLogger({
        level: (config === null || config === void 0 ? void 0 : config.level) || process.env.LOG_LEVEL || 'info',
        format: combine(splat(), simple(), colorize(), label({ label: (config === null || config === void 0 ? void 0 : config.label) ? config === null || config === void 0 ? void 0 : config.label : 'doc-framework' }), timestamp(), printf((obj) => {
            const { level, message, label, timestamp, durationMs } = obj;
            const lvlSymbol = Symbol.for('level');
            if (obj[lvlSymbol] === 'validate') {
                return message;
            }
            if (durationMs !== undefined) {
                return `${timestamp} { duration=${durationMs}ms } [${label}] ${level}: ${message}`;
            }
            return `${timestamp} [${label}] ${level}: ${message}`;
        })),
        transports: [new winston_1.default.transports.Console()],
        levels: log_level_config_1.default.levels,
    });
    return logger;
}
exports.appLogger = appLogger;
//# sourceMappingURL=app-logger.js.map