"use strict";
/**
 * Remark plugin for including external files.
 * Most of it taken from : https://github.com/Symbitic/remark-include
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.include = void 0;
const path_1 = __importDefault(require("path"));
const unist_util_visit_1 = __importDefault(require("unist-util-visit"));
const fs_1 = __importDefault(require("fs"));
const logger_1 = require("@sfdocs-internal/logger");
/**
 *
 * @param tree
 * @param file
 * @param cwd
 * @param processor
 */
function transformer(tree, file, cwd, processor) {
    (0, unist_util_visit_1.default)(tree, ['leafDirective'], (node, i, parent) => {
        const includePlugin = 'include';
        try {
            if (node.name !== includePlugin) {
                return;
            }
            const filename = path_1.default.basename(node.attributes.src);
            if (fs_1.default.existsSync(path_1.default.resolve(cwd, filename))) {
                const vfile = fs_1.default.readFileSync(path_1.default.resolve(cwd, filename));
                const root = processor.parse(vfile);
                if (root.children.some((child) => child.type === 'leafDirective')) {
                    file.message('Shared file must not contain "include".');
                    return;
                }
                // Recurse
                transformer(root, vfile, cwd, processor);
                const { children } = root;
                parent.children.splice(i, 1, ...children);
            }
            else
                file.message(`File not found ${path_1.default.resolve(cwd, filename)}`, node);
        }
        catch (err) {
            // Ignore catching as we are catching the error in file.fail statement above.
            const logger = (0, logger_1.createLogger)({
                label: '@salesforcedocs/markdown-compiler:include-plugin',
            });
            logger.error(`IncludePlugin File not found`);
            return true;
        }
    });
}
function include(options) {
    // Shared folder path is mandatory otherwise we will not include any file.
    if (options && options.cwd) {
        const cwd = options.cwd; //|| process.cwd()
        return (tree, file) => {
            transformer(tree, file, cwd, this);
        };
    }
}
exports.include = include;
//# sourceMappingURL=includePlugin.js.map